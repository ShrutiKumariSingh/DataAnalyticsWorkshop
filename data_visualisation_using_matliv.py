# -*- coding: utf-8 -*-
"""Data Visualisation using Matliv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f7LIB2GBKEN80F8NoL0C1R9RxJOI5lWG
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
x = np.array([1, 2, 3, 4, 5, 6, 7, 18, 19, 10])
y = np.array([1, 2, 13, 14, 15, 16, 17, 18, 19, 20])

# Line Plot (This is imp. for the time series data. It plots values against time or X-axis)

plt.plot(x, y)
plt.show()

import pandas as pd
data=pd.read_csv('/content/train.csv')
data.head()

#Scatter plot
plt.scatter(x=data['km'], y=data['current price'],color='orange')
plt.title('Scattered plot')
plt.xlabel('KM')
plt.ylabel('Current Price')
plt.show()

plt.scatter(x=data['km'], y=data['current price'],alpha=0.5,edgecolor='orange')
plt.title('Scattered plot')
plt.xlabel('KM')
plt.ylabel('Current Price')

plt.show()

plt.scatter(x=data['km'],y=data['current price'], alpha=1,edgecolor='red')
plt.title('Scatterplot')
plt.xlabel=('km')
plt.ylabel('current price')
x=80000
y=500000
dx=120000
dy=-400000
plt.arrow(x,y,dx,dy,head_width=1000,head_length=500,fc='green',ec='black')
plt.text(160000,500000,'Negative Correlation')
plt.show()

plt.scatter(x=data['km'],y=data['current price'], alpha=0.5,edgecolor='red')
plt.arrow(80000,520000,40000,-170000,head_width=2500,head_length=15000,fc='green',ec='red')
plt.text(100000,500000,'Negative Correlation')
plt.title('Scatterplot')
plt.xlabel=('km')
plt.ylabel('current price')

dep=['MA','BA','CA']
no=[60,120,70]
plt.bar(dep,no,color=['pink','cyan','maroon'])
plt.show()

dep=['MA','BA','CA']
no=[60,120,70]
plt.bar(dep,no,width=0.3,label='No_Student')
plt.bar(dep,no,width=0.3,bottom=no,label='No of present students')
plt.title('Department wise student and present')
plt.xlabel('Department')
plt.ylabel('No, of students')
plt.legend()

plt.hist(data['on road old'],bins=10,color='green')
plt.show()
plt.hist(data['on road old'],cumulative=True)
plt.show()

#boxplot
plt.boxplot(data['on road old'])
plt.show()

import matplotlib.pyplot as plt


ratings = [1, 2, 3, 4, 5]
numberof_cars = [10, 15, 20, 25, 30]

plt.bar(ratings, numberof_cars, color='green',)


plt.xlabel('Car Rating')
plt.ylabel('Number of Cars')
plt.title('Number of Cars by Ratings')

plt.show()

#draw piechart
plt.pie(x=no,labels=dep)
plt.show()

plt.pie(x=no,explode=[0,0,0.5],labels=dep,radius=0.5)
plt.show()

plt.pie(x=no,explode=[0,0,0.5],labels=dep,radius=0.5,autopct='%.3f%%',shadow=True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.array([1, 2, 3, 4, 5, 6, 7, 18, 19, 10])
plt.plot(x,color='orange',linestyle='--',marker='o')
plt.show()
plt.plot(x,color='orange',linestyle='--',marker='o',markerfacecolor='red')
plt.xlim(-1,5)
plt.ylim(0,6)
plt.show()

x=0
y=0
dx=1
dy=1
plt.arrow(x,y,dx,dy,head_width=0.1,head_length=0.1,fc='red',ec='black')
plt.text(1.1,0.9,'Text')
plt.xlim(-1,2)
plt.ylim(-1,2)
plt.show()

x=[1,3,5,7,8,9,11,12]
plt.plot(x)
plt.xlim(-2,10)
plt.ylim(-2,30)
plt.xticks(np.arange(-2,10,1.5))
plt.title('Autoscaling Plot')
plt.grid(True)
plt.show()

x=np.arange(0,5*np.pi,0.1)
sin1=np.sin(x)
cos1=np.cos(x)
tan1=np.tan(x)
lg=np.log(x)
plt.plot(x,sin1,label='sin(x)')
plt.show()
plt.plot(x,cos1,label='cos(x)')
plt.show()
plt.plot(x,tan1,label='tan(x)')
plt.show()
plt.plot(x,lg,label='log(x)')
plt.show()

x=np.arange(0,5*np.pi,0.1)
sin1=np.sin(x)
cos1=np.cos(x)
tan1=np.tan(x)
lg=np.log(x)
plt.subplot(2,2,1)
plt.plot(x,sin1)
plt.subplot(2,2,2)
plt.plot(x,cos1)
plt.subplot(2,2,3)
plt.plot(x,tan1)
plt.subplot(2,2,4)
plt.plot(x,lg)
plt.title('Logarithmic Plot')
plt.tight_layout()
plt.suptitle('My Graphs')
plt.tight_layout()
plt.figure(figsize=(10, 10))
plt.savefig('mygraph.jpg')
plt.show()

#seaborn
import seaborn as sns
sns.set_theme()
import numpy as np
import matplotlib.pyplot as plt
x=np.arange(0,5*np.pi,0.1)
sin1=np.sin(x)
cos1=np.cos(x)
tan1=np.tan(x)
lg=np.log(x)
plt.subplot(2,2,1)
plt.plot(x,sin1)
plt.subplot(2,2,2)
plt.plot(x,cos1)
plt.subplot(2,2,3)
plt.plot(x,tan1)
plt.subplot(2,2,4)
plt.plot(x,lg)
plt.title('Logarithmic Plot')
plt.tight_layout()
plt.suptitle('My Graphs')
plt.tight_layout()
plt.figure(figsize=(10, 10))
#plt.savefig('mygraph.jpg')
plt.show()

#scatterplot using sns
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_csv('/content/train.csv')
sns.scatterplot(data=data,x='km',y='current price')
plt.show()

#scatterplot using sns
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_csv('/content/train.csv')
sns.scatterplot(data=data,x='km',y='current price',hue='km',size='current price')
plt.show()

dataset=sns.load_dataset('flights')
dataset.head()

jan_pass=dataset[dataset['month']=='Jan']
jan_pass.head()
sns.lineplot(data=jan_pass,x='year',y='passengers')
plt.show()

sns.lineplot(data=dataset,x='year',y='passengers')
plt.show()

sns.lineplot(data=dataset,x='year',y='passengers',hue='month')
plt.show()

sns.barplot(data=dataset,x='month',y='passengers',hue='month')

sns.barplot(data=dataset,x='month',y='passengers',hue='month',legend=True)

sns.histplot(data=dataset,x='passengers')

sns.histplot(data=dataset,x='passengers',bins=15,kde=True)

sns.kdeplot(data=dataset,x='passengers')

sns.countplot(data=dataset,x='month',hue='year')

sns.boxplot(data=dataset,x='month',y='passengers')

sns.boxplot(data=dataset,x='month',y='passengers',hue='year',notch=True)

mpg=sns.load_dataset('mpg')
mpg.head()

sns.violinplot(data=mpg,x='mpg')

sns.kdeplot(data=mpg,x='mpg')

sns.countplot(data=mpg,x='cylinders',hue='origin')

sns.boxplot(data=mpg,x='mpg',y='origin',hue='cylinders',notch=True)

sns.violinplot(data=mpg,x='mpg',y='origin',hue='cylinders')

d=sns.pairplot(data=mpg)

sns.heatmap(data=mpg.select_dtypes(include=np.number).corr(),annot=True)

d_new=mpg[['cylinders','displacement','horsepower']]
d_new.head()

c=d_new.corr()
c.head()

sns.heatmap(c,vmin=-1,vmax=1,annot=True,linewidth=0.5)

penguins_dataset = sns.load_dataset('penguins')
penguins_dataset.head()

import pandas as pd
categorical_cols = penguins_dataset.select_dtypes(include='object').columns
penguins_dataset = pd.get_dummies(penguins_dataset, columns=categorical_cols, drop_first=True)
display(penguins_dataset.head())
penguins_dataset.info()

print("Missing values before handling:")
print(penguins_dataset.isnull().sum())

penguins_dataset.dropna(inplace=True)

print("\nMissing values after handling:")
print(penguins_dataset.isnull().sum())

