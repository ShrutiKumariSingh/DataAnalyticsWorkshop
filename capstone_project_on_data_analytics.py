# -*- coding: utf-8 -*-
"""Capstone Project on Data Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pxa4eMBNnP1fhdD33dj3x2PZch0bCvd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
excel_file=pd.read_excel('NCRB_CII-2020.xlsx')
excel_file.head()

# Commented out IPython magic to ensure Python compatibility.
pd.set_option('display.max_columns',None)#enhance output readability
plt.style.use('seaborn-v0_8')#aesthetic plots
# %matplotlib inline

excel_file=pd.ExcelFile('NCRB_CII-2020.xlsx')
print('Available Sheets')
print(excel_file.sheet_names)

df=excel_file.parse(excel_file.sheet_names[0])
df.head()

print(f'Dataset Shape',(df.shape))
print('\n Dataframe Info:',(df.info()))
print('\n Descriptive Statistics:',(df.describe))

df.tail()

df.columns

df.columns=['Index','City','Boys','Girls','Juvenile_Total','M-18-30','F-18-30','T-18-30','M-30-45','F-30-45','T-30-45','M-45-60','F-45-60','T-45-60','M-60','F-60','T-60','T-M','T-F','T-A']
print("\n Renamed Columns:\n",df.columns)

df.reset_index(drop=True,inplace=True)#reset index after row deletion
df.head()#display

#check if there is any missing values
print('Missing Values',df.isna().sum())
#check the data type of each column
print('\n Data Types:\n',df.dtypes)

numeric_cols=df.columns.drop(('City'))#convert numeric colums to int if they arent already .list that should be int excluding city
df[numeric_cols]=df[numeric_cols].apply(pd.to_numeric,errors='coerce')#convert to proper type handling
print("\n Data Types after Conversion:\n")
print(df.dtypes)

df['gender_ratio']=df['T-M']/(df['T-M']+df['T-F']+1e-6)#avoiding zero division error
df['juvenile_percent']=(df['Juvenile_Total']/df['T-A'])*100
df[['City','gender_ratio','juvenile_percent']]

#add missing values at row index 6, column index 3 and 9
df.iat[6, 3] = np.nan
df.iat[6, 9] = np.nan

print(df)

#display only those Rows having missing values
print("Rows after checking for missing values:\n",df[df.isna().any(axis=1)])

#check for missing values
print("\n Missing Values:\n",df.isna().sum())

#replace the missing values with mean of the column
mean_col6 = df.iloc[:, 6].mean()
mean_col9 = df.iloc[:, 9].mean()

df.iloc[:, 6] = df.iloc[:, 6].fillna(mean_col6)
df.iloc[:, 9] = df.iloc[:, 9].fillna(mean_col9)
print("\n Missing Values After Replacement:\n",df.isna().sum())

df.isna().sum()

df[df.isna().any(axis=1)]

#put the mean of column at index 7
mean_col7=df.iloc[:,7].mean()
df.iloc[:,7]=df.iloc[:,7].fillna(mean_col7)
print("\n Missing Values After Replacement:\n",df.isna().sum())

missing=df[df.isnull().any(axis=1)]
print(missing)

total_male=df['T-M'].sum()
total_female=df['T-F'].sum()
grand_total=df['T-A'].sum()
print(f'Total Male:{total_male}')
print(f'Total Female:{total_female}')
print(f'Grand Total:{grand_total}')
print(f'Female Crime Rate:{(total_female/grand_total)*100}')
print(f'Male Crime Rate:{(total_male/grand_total)*100}')

#crime totals by gender
total_male=df['T-M'].sum()
total_female=df['T-F'].sum()
grand_total=df['T-A'].sum()

#top 10 cities by total crime
top10_cities=df.nlargest(10,'T-A')
print(top10_cities)

#crime distribution by age group
age_groups=['M-18-30','F-]

#Juvenile Crime Summary
total_juvenile_crime=df['Juvenile_Total'].sum()
print(f'Total Juvenile Crime:{total_juvenile_crime}')

#cities where female crimes>1000

#cities with juvenile crime more than 10% of total crime

#cities where age group 18-30 commited more than 5000 crimes

#cities starting with new

#30-45 age groups crimes between 3000 and 6000

#

#

#

#